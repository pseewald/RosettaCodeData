import extensions.
import system'routines.

class Operable
{
    operable = $self.

    operate
        = "delegate implementation".
}

class Delegator
{
    object theDelegate.

    constructor new
    [
        theDelegate := nil.
    ]

    set Delegate:obj
    [
        if ($nil == obj)
            [ theDelegate := $nil. ];
            [ theDelegate := obj. ].
    ]

    operate
    [
        // if the object does not support "get&operable" message - returns nil
        var anOperable := theDelegate operable \ back:$nil.

        if ($nil == anOperable)
        [
            ^ "default implementation".
        ];
        [
            ^ anOperable operate.
        ].
    ]
}

program =
[
    var delegator := Delegator new.

    (nil, Object new, Operable new) forEach(:o)
    [
       delegator Delegate := o.

       console printLine(delegator operate).
    ].
].
