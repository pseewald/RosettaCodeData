import extensions.
import system'routines.

class IOperable
{
    operate
    [
        NotSupportedException new; raise.
    ]
}

class Operable :: IOperable
{
    operate
        = "delegate implementation".
}

class Delegator
{
    object theDelegate.

    constructor new
    [
        theDelegate := nil.
    ]

    set Delegate:obj
    [
        if ($nil == obj)
            [ theDelegate := $nil. ];
            [ theDelegate := obj. ].
    ]

    operate(Object operable)
        = "default implementation".

    operate(IOperable operable)
        = operable operate.

    operate
        <= operate(theDelegate).
}

program =
[
    var delegator := Delegator new.

    (nil, Object new, Operable new) forEach(:o)
    [
       delegator Delegate := o.

       console printLine(delegator operate).
    ].
].
