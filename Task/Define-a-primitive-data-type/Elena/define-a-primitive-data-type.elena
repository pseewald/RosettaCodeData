import extensions.

type tiny = TinyInt.

sealed struct TinyInt :: BaseNumber
{
    int theValue.

    explicit int:n
    [
        if ((n <= 1)||(n >= 10))
        [
            InvalidArgumentException new; raise
        ].

        theValue := n.
    ]

    explicit t(LiteralValue s)
    [
        theValue := s toInt.

        if ((theValue <= 1)||(theValue >= 10))
        [
            InvalidArgumentException new; raise
        ]
    ]

    int = theValue.

    tiny add(TinyInt t)
        = theValue + t int.

    tiny subtract(TinyInt t)
        = theValue + t int.

    tiny multiply(TinyInt t)
        = theValue + t int.

    tiny divide(TinyInt t)
        = theValue + t int.

    bool equal(TinyInt t)
       = theValue == t int.

    bool less(TinyInt t)
       = theValue == t int.
}

program =
[
    tiny i := 4t.

    tiny j := i + i.

    try(control do:
    [
        tiny k := i + j.
    ])
    {
      on(InvalidArgumentException e)
      [
          console printLine("A value is out of range").
      ]
    }.
].
