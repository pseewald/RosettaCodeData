import extensions.
import system'routines.
import system'collections.

sealed class Trit
{
    bool _value.

    bool = _value.

    sealed explicit object:v
    [
        _value := v bool.
    ]

    type<Trit> equivalent : b
        = _value equal(b bool) \ back:nil.

    type<Trit> inverted
        = _value inverted \ back:nil.

    type<Trit> and : b
    [
        if ($nil == _value)
        [
            ^ b and:nil \ back:nil.
        ];
        [
            ^ _value and:$(b bool) \ back:nil.
        ]
    ]

    type<Trit> or : b
    [
        if ($nil == _value)
        [
            ^ b or:nil \ back:nil.
        ];
        [
            ^ _value or:$(b bool) \ back:nil.
        ]
    ]

    type<Trit> implies : b
        = $self inverted; or:b.

    literal = _value literal \ back:"maybe".
}

program =
[
    list<Trit> values := (true, nil, false).
    values forEach(:left)
    [
        console printLine("¬",left," = ", left inverted).
        values forEach(:right)
        [
            console printLine(left, " & ", right, " = ", left && right).
            console printLine(left, " | ", right, " = ", left || right).
            console printLine(left, " → ", right, " = ", left implies:right).
            console printLine(left, " ≡ ", right, " = ", left equivalent:right).
        ].
    ].
].
