import extensions.

classifyNumbers =
{
    eval(int bound, ref<int> abundant, ref<int> deficient, ref<int> perfect)
    [
        int a := 0.
        int d := 0.
        int p := 0.
        Array<int> sum := V<int>(bound + 1).

        1 to(bound / 2) do(:divisor)<int>
        [
            (divisor + divisor) to:bound by:divisor do(:i)<int>
            [
                (sum[i]) += divisor
            ].
        ].
        1 to:bound do(:i)<int>
        [
            int t := sum[i].

            if (sum[i]<i) [ d += 1 ];
            if (sum[i]>i) [ a += 1 ];
            [ p += 1 ]
        ].

        abundant value := a.
        deficient value := d.
        perfect value := p
    ]
}.

public program
[
    int abundant := 0.
    int deficient := 0.
    int perfect := 0.
    classifyNumbers eval(20000, &abundant, &deficient, &perfect).
    console printLine("Abundant: ",abundant,", Deficient: ",deficient,", Perfect: ",perfect)
]
