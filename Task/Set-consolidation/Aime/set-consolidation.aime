void
display(list l)
{
    integer i;
    record r;

    for (i, r in l) {
        text u, v;

        o_text(i ? ", {" : "{");
        for (u in r) {
            o_(v, u);
            v = ", ";
        }
        o_text("}");
    }

    o_text("\n");
}

integer
intersect(record r, record u)
{
    trap_q(r_vcall, r, r_put, 1, record().copy(u), 0);
}

void
merge(record u, record r)
{
    r.wcall(r_add, 1, 2, u);
}

list
consolidate(list l)
{
    integer i;
    record r;

    for (i, r in l) {
        integer j;

        j = i - ~l;
        while (j += 1) {
            record u;

            u = l[j];
            if (intersect(r, u)) {
                merge(u, r);
                l.delete(i);
                i -= 1;
                break;
            }
        }
    }

    l;
}

record
R(...)
{
    record r;

    ucall(r_put, 1, r, 0);

    return r;
}

integer
main(void)
{
    display(consolidate(list(R("A", "B"), R("C", "D"))));
    display(consolidate(list(R("A", "B"), R("B", "D"))));
    display(consolidate(list(R("A", "B"), R("C", "D"), R("D", "B"))));
    display(consolidate(list(R("H", "I", "K"), R("A", "B"), R("C", "D"),
                             R("D", "B"), R("F", "G", "K"))));

    0;
}
