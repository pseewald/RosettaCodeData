integer
dist(data s, integer i, data t, integer j, list d)
{
    integer x;

    x = d[i * (~t + 1) + j];
    if (x == -1) {
        if (i == ~s) {
            x = ~t - j;
        } elif (j == ~t) {
            x = ~s - i;
        } elif (s[i] == t[j]) {
            x = dist(s, i + 1, t, j + 1, d);
        } else {
            x = dist(s, i + 1, t, j + 1, d);
            x = min(x, dist(s, i, t, j + 1, d));
            x = min(x, dist(s, i + 1, t, j, d));

            x += 1;
        }

        d[i * (~t + 1) + j] = x;
    }

    x;
}

integer
levenshtein(data s, data t)
{
    list d;

    d.pn_integer(0, (~s + 1) * (~t + 1), -1);

    dist(s, 0, t, 0, d);
}

integer
main(void)
{
    text s1, s2;

    s1 = "rosettacode";
    s2 = "raisethysword";

    o_form("distance between `~' and `~' is ~\n", s1, s2, levenshtein(s1, s2));

    return 0;
}
