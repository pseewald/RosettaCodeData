agm1step{T<:AbstractFloat}(x::T, y::T) = (x + y) / 2, sqrt(x * y)

function approxπstep{T<:AbstractFloat}(x::T, y::T, z::T, n::Integer)
    a, g = agm1step(x, y)
    k = n + 1
    s = z + 2 ^ (k + 1) * (a ^ 2 - g ^ 2)
    return a, g, s, k
end

approxπ{T<:AbstractFloat}(a::T, g::T, s::T) = 4a ^ 2 / (1 - s)

setprecision(512)
a, g, s, k = big(1.0), 1 / √big(2.0), big(0.0), 0
oldπ = big(0.0)
println("Approximating π using ", precision(BigFloat), "-bit floats.")
println("   k     Error  Result")
for i in 1:100
    a, g, s, k = approxπstep(a, g, s, k)
    estπ = approxπ(a, g, s)
    if abs(estπ - oldπ) < 2eps(estπ) break end
    oldπ = estπ
    err = abs(π - estπ)
    @printf("%4d%10.1e%68.60e\n", i, err, estπ)
end
