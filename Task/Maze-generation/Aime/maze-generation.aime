void
grid_maze(data b, integer N)
{
    data d;
    integer i, j;

    call_n(N, b_suffix, d, "+---");
    b_suffix(d, "+\n");

    call_n(N, b_suffix, d, "| * ");
    b_suffix(d, "|\n");

    call_n(N, b_extend, b, d);

    b_size(d, N * 4 + 2);

    b_extend(b, d);
}

void
walk_cell(data b, integer N, integer line_size, integer x, integer y,
	  list x_offsets, list y_offsets)
{
    integer i, r;

    b_replace(b, y + x, ' ');

    r = drand(3);

    i = 0;
    while (i < 4) {
	integer p, q;

        p = x + (p = x_offsets[(r + i) & 3]);
        q = y_offsets[(r + i) & 3];
        q += y;

	if (-1 < p && p < line_size
	    && -1 < q && q < line_size * (N * 2 + 1)) {
	    if (b[q + p] == '*') {
		walk_cell(b, N, line_size, p, q, x_offsets, y_offsets);
                b[(q + y) / 2 + (p + x) / 2] = ' ';
                if (p == x) {
                    b[(q + y) / 2 + p - 1] = ' ';
                    b[(q + y) / 2 + p + 1] = ' ';
		}
	    }
	}

	i += 1;
    }
}

void
walk_maze(data b, integer N)
{
    integer line_size, x, y;
    list x_offsets, y_offsets;

    line_size = N * 4 + 1 + 1;

    l_bill(x_offsets, 0, 4, 0, -4, 0);
    l_bill(y_offsets, 0, 0, line_size * 2, 0, line_size * -2);

    x = drand(N - 1) * 4 + 2;
    y = line_size * (drand(N - 1) * 2 + 1);

    walk_cell(b, N, line_size, x, y, x_offsets, y_offsets);
}

integer
main(void)
{
    data b;
    integer N;

    N = 10;

    grid_maze(b, N);
    walk_maze(b, N);

    o_(b);

    return 0;
}
