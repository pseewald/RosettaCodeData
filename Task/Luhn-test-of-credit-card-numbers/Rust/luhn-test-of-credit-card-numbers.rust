struct Digits(u64);
impl Iterator for Digits {
    type Item = u64;
    fn next(&mut self) -> Option<u64> {
        let next = if self.0 == 0 { None } else { Some(self.0 % 10) };
        self.0 /= 10;
        next
    }
}

fn luhn_test(num: u64) -> bool {
    Digits(num).enumerate()
        .map(|(i, digit)| if (i % 2) == 0 { digit } else { Digits(digit*2).sum() })
        .sum::<u64>() % 10 == 0
}

fn main() {
    let nums = [49927398716, 49927398717, 1234567812345678, 1234567812345670];
    for &n in &nums {
        println!("{}: {:?}", n, luhn_test(n));
    }
}
